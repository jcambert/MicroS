#region using
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using MicroS_Common.Types;
using MicroS_Common.Controllers;
using MicroS_Common.Dispatchers;
using <%=namespace%>.domain.<%= changeCase.pascalCase(name) %>s.Dto;
using <%=namespace%>.domain.<%= changeCase.pascalCase(name) %>s.Queries;
#endregion

/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: <%=author.name%>
/// @email: <%=author.email%>
/// @created_on: <%= new Date()%>
/// </summary>
namespace <%=namespace%>.Services.<%= changeCase.pascalCase(name) %>s.Controllers
{
    [Route("<%= changeCase.lowerCase(name) %>s")]
    public partial class <%= changeCase.pascalCase(name) %>sController : BaseController
    {
        public <%= changeCase.pascalCase(name) %>sController(IDispatcher dispatcher,IConfiguration config) : base(dispatcher,config)
        {
        }

        [HttpGet("")]
        public async Task<ActionResult<PagedResult<<%= changeCase.pascalCase(name) %>Dto>>> Get([FromQuery] Browse<%= changeCase.pascalCase(name) %>s query)
            => Collection(await QueryAsync(query));

        [HttpGet("{id}")]
        public async Task<ActionResult<<%= changeCase.pascalCase(name) %>Dto>> Get([FromRoute] Get<%= changeCase.pascalCase(name) %> query)
            => Single(await QueryAsync(query));
        
        
    }
}