using AutoMapper;
using MicroS_Common.Handlers;
using MicroS_Common.Mongo;
using System.Threading.Tasks;
using <%=namespace%>.domain.<%= changeCase.pascalCase(name) %>s.Dto;
using <%=namespace%>.domain.<%= changeCase.pascalCase(name) %>s.Queries;
using <%=namespace%>.Services.Repositories;

/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: <%=author.name%>
/// @email: <%=author.email%>
/// @created_on: <%= new Date()%>
/// </summary>
namespace <%=namespace%>.Services.<%= changeCase.pascalCase(name) %>s.Handlers
{
    /// <summary>
    /// Get <%= changeCase.pascalCase(name) %> Handler
    /// </summary>
    public partial class Get<%= changeCase.pascalCase(name) %>Handler :  IQueryHandler<Get<%= changeCase.pascalCase(name) %>, <%= changeCase.pascalCase(name) %>Dto>
    {
        

        #region Constructors
        public Get<%= changeCase.pascalCase(name) %>Handler(
            IBrowse<%= changeCase.pascalCase(name) %>Repository repository,
             IMapper mapper)
        {
            Repository = repository;
            Mapper = mapper;
        }
        #endregion

        #region public properties
        public IBrowse<%= changeCase.pascalCase(name) %>Repository Repository{get;}
        public IMapper Mapper{get;}
        #endregion

        #region public functions
        /// <summary>
        ///  Handle the command with context
        /// </summary>
        /// <param name="command">The command to handle</param>
        /// <param name="context">The correlation context</param>
        /// <returns></returns>
        public async Task<<%= changeCase.pascalCase(name) %>Dto> HandleAsync(Get<%= changeCase.pascalCase(name) %> query)
        {
            var model = await Repository.GetAsync(query.Id);

            return model == null ? null : Mapper.Map<<%= changeCase.pascalCase(name) %>Dto>(model);

        }
        #endregion
    }
}