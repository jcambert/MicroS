using System;
using System.Collections.Generic;
using MicroS_Common.Types;
<%if(mongo){%>using MicroS_Common.Mongo;<%}%>
<% props.filter(property=>!property.isprimitive).forEach(property=>{%>
using <%=namespace%>.domain.<%=property.name%>s.Domain;
<%})%>
/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: <%=author.name%>
/// @email: <%=author.email%>
/// @created_on: <%= new Date()%>
/// </summary>
namespace <%=namespace%>.domain.<%= changeCase.pascalCase(name) %>s.Domain
{
    <%if(mongo){%>[MongoDocument("<%= changeCase.lowerCase(name) %>")]<%}%>
    public class <%= changeCase.pascalCase(name) %> <%if(base_entity){%> :BaseEntity<%}%>
    {
        #region private variables
        <% props.filter(property=>!property.isprimitive).forEach(property=>{%>
            private ISet<<%= property.name %>> _<%= property.name %>=new HashSet<<%= property.name %>>();
        <%})%>
        #endregion


        #region public properties
        <% props.filter(property=>property.isprimitive).forEach(property=> { %>
        public <%= property.type %> <%= changeCase.pascalCase( property.name) %> {get;set;} 
        <% } )%>
        <% props.filter(property=>!property.isprimitive).forEach(property=>{%>
            public IEnumerable<<%=property.name%>> <%=property.name%>s{
                get=>_<%=property.name%>;
                set=>_<%=property.name%>=new HashSet<<%=property.name%>>(value);
            }
        <%}) %>
        #endregion

        #region Constructeur
        public <%= changeCase.pascalCase(name) %>():base(){}
        <%if(subdoc){%>
        public <%= changeCase.pascalCase(name) %>(<%= props.filter(property=>property.isprimitive).map(property=>`${property.type} ${changeCase.lowerCase( property.name)}`).join(',')  %>)
        : base()
        {
            <% props.filter(property=>property.isprimitive).forEach(property=>{%> 
            <%= changeCase.pascalCase( property.name) %> = <%= changeCase.lowerCase( property.name) %>;<%});%>
        }
        <%}else{%>
        public <%= changeCase.pascalCase(name) %>(<%= props.filter(property=>property.isprimitive).map(property=>`${property.type} ${changeCase.lowerCase( property.name)}`).join(',') %>)
            : base()
        {
            <% props.filter(property=>property.isprimitive).forEach(property=>{%> 
            <%= changeCase.pascalCase( property.name) %> = <%= changeCase.lowerCase( property.name) %>;<%});%>
        }
        <%}%>
        #endregion
        #region public functions
        #endregion

    }
}
