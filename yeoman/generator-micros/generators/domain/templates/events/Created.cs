using System;
using System.Collections.Generic;
<%- props.filter(prop=>!prop.isprimitive).map(prop=>`using ${namespace}.domain.${prop.name}s.Domain;`).join('\n') %>

/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: <%=author.name%>
/// @email: <%=author.email%>
/// @created_on: <%= new Date()%>
/// </summary>
namespace <%=namespace%>.domain.<%= changeCase.pascalCase(name)%>s.Messages.Events
{
    public class <%= changeCase.pascalCase(name)%>Created : <%= changeCase.pascalCase(name)%>BaseEvent
    {
        public Guid Id { get; }

        <%props.filter(property=>property.isprimitive).forEach(property=>{
            %>public <%= property.type%>  <%= changeCase.pascalCase(property.name)%>{get;}
        <%})%>
        <%- props.filter(property=>!property.isprimitive).map(property=>`public List<${property.name}> ${property.name}s;`).join('\n')%>
        public <%= changeCase.pascalCase(name)%>Created(Guid id,
        <%- props.filter(prop=>prop.isprimitive).map(prop=>`${prop.type} ${changeCase.lowerCase(prop.name)}`).concat(props.filter(prop=>!prop.isprimitive).map(prop=>`List<${prop.name}> ${changeCase.lowerCase(prop.name)}s`)).join(',') %>
        )
        {
            Id = id;
            <%props.filter(prop=>prop.isprimitive).forEach(property=>{%><%=changeCase.pascalCase(property.name) %> = <%= changeCase.lowerCase(property.name) %> ;
            <%}) %>
            <%- props.filter(prop=>!prop.isprimitive).map(prop=>`${prop.name}s = ${changeCase.lowerCase(prop.name)}s;`).join('\n') %>
        }
    }
}
