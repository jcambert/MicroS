using System;
using System.Collections.Generic;
<%- props.filter(prop=>!prop.isprimitive).map(prop=>`using ${appname}.domain.${prop.name}s.Domain;`).join('\n') %>
<% if(props.filter(property=>property.dynamic).some(e=>true)){%>using WeCommon;<%}%>
/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: <%=author.name%>
/// @email: <%=author.email%>
/// @created_on: <%= new Date()%>
/// </summary>
namespace <%=appname%>.domain.<%= domain%>s.Messages.Events
{
    public class <%= pascalDomain%>Created : <%= pascalDomain%>BaseEvent
    {
        public Guid Id { get; }

        <%props.filter(property=>property.isprimitive && !property.dynamic).forEach(property=>{
            %>public <%= property.type%>  <%= changeCase.pascalCase(property.name)%>{get;}
        <%})%>
        <%props.filter(prop=>prop.dynamic).forEach(property=>{
            %>public Property<<%= property.type%>>  <%= changeCase.pascalCase(property.name)%>{get;}
        <%})%>
        <%- props.filter(property=>!property.isprimitive && !property.dynamic).map(property=>`public List<${property.name}> ${property.name}s;`).join('\n')%>
        #region Constructor
        public <%= pascalDomain%>Created(Guid id,
        <%- props.filter(prop=>prop.isprimitive ).map(prop=>prop.dynamic?`Property<${prop.type}> ${changeCase.lowerCase(prop.name)}`: `${prop.type} ${changeCase.lowerCase(prop.name)}`).concat(props.filter(prop=>!prop.isprimitive).map(prop=>`List<${prop.name}> ${changeCase.lowerCase(prop.name)}s`)).join(',') %>
        )
        {
            Id = id;
            <%props.filter(prop=>prop.isprimitive).forEach(property=>{%><%=changeCase.pascalCase(property.name) %> = <%= changeCase.lowerCase(property.name) %> ;
            <%}) %>
            <%- props.filter(prop=>!prop.isprimitive).map(prop=>`${prop.name}s = ${changeCase.lowerCase(prop.name)}s;`).join('\n') %>
        }
        #endregion
    }
}
